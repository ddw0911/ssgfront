## js : 웹페이지를 조작하기 위해 사용

- 웹페이지의 핵심기능 : 데이터 관리 (저장,출력,활용)
- 변수와 상수 : 데이터를 담는 메모리 (재사용성)

## 자료형
    - 문자열 String : "",''
    - 숫자 Number
        산술연산자 : 숫자가 아닌 타입 사용 시 NaN(Not a Number)
    - Boolean
    - Undefined
    - Null
    - Symbol
    - Bigint
    - Object

## 배열 Array
    여러 데이터를 '순서(index)'와 함께 저장할 때

    메서드
    array.length
    push() 값 추가
    pop() 가장 뒤의 데이터 삭제 및 반환 
    includes() 값 포함 여부
    indexOf() 값의 인덱스 반환

     from() 배열 복사하여 객체 생성
     of() param을 값으로 가지는 배열 객체 생성
     concat() 배열 합치기
     fill(x, y) 배열의 데이터를 x로 index y부터 변경
     filter() 조건식에 맞는 값만 추출한 배열 반환
     find() 조건식에 맞는 값 중 첫번째 값 반환 (없으면 Undefined)
     findLast()
     flat()
     forEach()
     join()
     ...

## 객체 Object
    ?? Property 속성
        객체가 가지고 있는 키-값. 데이터나 메서드
    ?? Prototype
        js의 모든 함수객체에 자동으로 부여되는 속성(메커니즘)
        -> 해당 함수가 생성자함수로 사용되면 공통으로 속성, 메서드를 상속받도록 정의
        -> 생성된 객체 간 속성, 메서드 공유 (메모리 효율)

    value를 통해 무엇에 대한 데이터인지 명시할 수 /w {}
    ex)
        let userData = {
            name : 'ssg',
            age : 20,
            height : 180,
            company : 'SSGINC'
        }

    객체 안의 각각의 데이터 'property' (key : value)
    -> key에 접근해 value를 가져온다
    /w Dot notation - Object.key
       Bracket notation - Object["key"] ("" 없으면 변수로 인식)

    메서드
    keys() key로만 배열을 생성해 반환
    values()
    ...

## 함수 Function
    계산 or 어떤 기능을 수행하는 도구
    입력데이터(param), 데이터 처리(logic process), 결과데이터(return value)
    ex)
        Function say() {
            console.log('Hi')
        }
    
    HTML 태그에는 부여할 수 있는 속성들(Property)이 존재
    ex)
        id, class
        onClick() - 사용자에 의해 클릭(이벤트)가 발생했을 때 코드실행

## querySelector 태그선택 - js 내에서 html요소의 객체값을 참조할 때 사용

## 함수의 return - 데이터를 함수 호출 위치로 반환
    ex)
        const sum = function() { // 익명함수
            let result = 10 *10;
            return result;
        }

        let returnData = sum();
        console.log(returnData); // 20 반환

## DOM
    HTML 문서를 파싱하여 트리구조 형태로 생성된 객체
    ?? Parsing
        구성된 요소를 분석하고 의미를 이해하여 활용

    DOM Tree와 Node
        - Document 노드 : 진입점 역할
        - HTML : Doc 노드 이후 노드 (1개만 존재 - root node)
        - head, h1, p, ... : element(요소) 노드 (property를 가질 수 있는 유일한 노드)
        - src, id, class : attribute(속성) 노드
        - <p>안녕</p> 안녕 : text(텍스트) 노드 (=child 노드, leaf 노드)

        ex)
            document.getElementByTagName('p').item(0) : document의 element(p태그)를 참조
            document.getElementByID('demo')
            document.querySelector(#id(.'')) : id 기반으로 class('') 참조
            document.querySelectorAll() : 모든 요소 참조 (배열)
            document.createElement() : 새로운 node 생성 + DOM에 추가 /w document.appendChild()
            -> document를 활용하여 js 내부의 node를 참조

            https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Using_the_Document_Object_Model