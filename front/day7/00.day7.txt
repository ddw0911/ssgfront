## 함수 리터럴
    js에서 함수는 객체 타입의 값
    -> 함수객체를 생성할때 사용되는 문법 자체
        funciton 키워드, 함수이름, 매개변수, 본문(body)로 구성
    ex)
        // 함수표현식 (함수리터럴 사용)
        let func1 = fucntion add(x,y) {
            return x+y;
        }

    ++ 함수선언문 vs 함수표현식 활용
        선언문 - 위치 상관없이 호출+재사용 가능하므로 '전역적으로' 사용할 함수
        표현식 - 특정 컨텍스트 내에서 사용할 함수 ex) 콜백함수, 특정 블록 내

## 콜백 함수
    ex)
        let add1 = (
            function() {
                let a = 10;
                return function(x,y) {
                    return x+y+a;
                    };
                }
            ());

            console.log(add1(2,5)); // 17 출력

## 화살표 표현식 (함수표현식)
    const add = (x,y) => x+y;
    console.log(add(2,5)); // 7 출력

    활용 : 콜백함수, 간단한연산, 상위스코프의 this사용(자동바인딩)
                but new(생성자함수) 불가

## 모달 vs 팝업
    팝업 Pop-up : 새로운 웹브라우저 창 추가 - 안쓰는 추세
    모달 Modal : 같은 브라우저 내 상위레이어(창)를 띄우는 방식
                    -> 창 종료 전까지 원래 화면 작동불가
             ++ 논-모달 : 모달과 같은 방식 but 원래 화면 작동 가능

        ex)
            alert('정말로 삭제하시겠습니까?'); // 메시지 확인

            let result = prompt('이름을 입력하세요', ""); // 입력창 -> 문자열 반환(취소 시 null)
            alert('이름은 ${age}입니다');

            let result = confirm('로봇입니까?'); // 확인 or 취소
            alert(result);  // true or false

## JSON javascript object notation
    값이나 객체를 나타내는 데이터 범용 포맷 RFC1627
    Why? 복잡한 객체 처리 (네트워크를 통해 전송 등) -> 객체를 문자열로 전환해야

    메서드
    JSON.Stringify 객체 -> JSON
    JSON.parse JSON -> 객체

## 다양한 함수
    1) 즉시실행함수 : 정의와 동시에 호출 (한번만 호출)
        ex)
            (
                function test() {
                let a = 10;
                let b = 5;
                return a+b;}()
            );

    2) 재귀함수 : 자신을 호출 recursive call
        ex)
            function countDown(number){
                if(number<0) return;
                console.log(number);
                countDown(number-1);
            }
    
    3) 중첩함수 : 함수내 함수를 정의한 함수 (nested, inener)
        ex)
            function outer(){
                fucntion inner(){
                    alert('중첩');
                }
                inner(); // 외부레벨에서 호출
            }
            console.log(outer());

    4) 콜백함수 : 다른 함수의 인자로 전달되어 호출되는 함수 (전달받은 함수는 HOF higher order fuction)
        ex)
            function repeat(n,f) { // HOF
                for(let i =0; i<n; i++){
                f(i);
                }
            }

            let logEvenPrint = function (i) { // 콜백함수
                if(i%2==1) console.log(i);
                }
            
            

    ?? script 속성 기본, async, defer (/w src="파일명.js")
        기본 : 스크립트를 만나면 다운로드하고 실행 전까지 HTML 파싱중단 
            -> 페이지 로딩속도에 영향
        async : 스크립트를 비동기적으로 다운로드하고, 완료되면 HTML파싱을 중단 및 스크립트 실행
            -> 스크립트 실행시점 파악 어려움 - DOM에 영향없는 독립적인 스크립트에 적합 ex)광고, 분석 
        defer : 스크립트를 비동기적으로 다운, HTML 파싱 후 스크립트 실행
            -> DOM을 조작하거나 다른 스크립트와의 순서가 중요할때